// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyRhSystem.Infrastructure.Persistence;

#nullable disable

namespace MyRhSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250819153630_Add_New_table_2s")]
    partial class Add_New_table_2s
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Benefits.BenefitCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("benefit_categories");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Benefits.BenefitTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("benefit_types");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Companies.UserCompany", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(0);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("user_companies", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Departments.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .HasDatabaseName("UX_departments_nome");

                    b.HasIndex(new[] { "Nome" }, "UX_departments_nome")
                        .IsUnique()
                        .HasDatabaseName("UX_departments_nome1");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cargo");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("departamento");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("funcao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("sexo");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("sobrenome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("telefone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Email" }, "IX_employees_email_unique")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeBenefits", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int>("BenefitTypeId")
                        .HasColumnType("int")
                        .HasColumnName("benefit_type_id");

                    b.HasKey("EmployeeId", "BenefitTypeId");

                    b.HasIndex("BenefitTypeId");

                    b.ToTable("employee_benefits");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("GrauParentesco")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("grau_parentesco");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_contacts");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeContract", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("Admissao")
                        .HasColumnType("datetime2")
                        .HasColumnName("admissao");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Experiencia1")
                        .HasColumnType("datetime2")
                        .HasColumnName("experiencia_1");

                    b.Property<DateTime?>("Experiencia2")
                        .HasColumnType("datetime2")
                        .HasColumnName("experiencia_2");

                    b.Property<TimeSpan?>("HoraEntrada")
                        .HasColumnType("time")
                        .HasColumnName("hora_entrada");

                    b.Property<TimeSpan?>("HoraSaida")
                        .HasColumnType("time")
                        .HasColumnName("hora_saida");

                    b.Property<int?>("JornadaHoras")
                        .HasColumnType("int")
                        .HasColumnName("jornada_horas");

                    b.Property<decimal>("Salario")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("salario");

                    b.Property<string>("TipoContrato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tipo_contrato");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("EmployeeId");

                    b.ToTable("employee_contracts");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeDependents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("GrauParentesco")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("grau_parentesco");

                    b.Property<DateTime?>("Nascimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("nascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_dependents");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeDocuments", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CtpsNumero")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ctps_numero");

                    b.Property<string>("CtpsSerie")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ctps_serie");

                    b.Property<string>("OrgaoEmissor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orgao_emissor");

                    b.Property<string>("Pis")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("pis");

                    b.Property<string>("Rg")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("rg");

                    b.Property<DateTime?>("RgEmissao")
                        .HasColumnType("datetime2")
                        .HasColumnName("rg_emissao");

                    b.Property<string>("Sessao")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("sessao");

                    b.Property<string>("TituloEleitor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("titulo_eleitor");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Zona")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("zona");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "Cpf" }, "IX_employee_documents_cpf_unique")
                        .IsUnique();

                    b.ToTable("employee_documents");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.JobRoles.JobLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nome");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("UX_job_levels_nome");

                    b.ToTable("job_levels", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.JobRoles.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("level_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Requisitos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("requisitos");

                    b.Property<string>("Responsabilidades")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("responsabilidades");

                    b.Property<decimal>("SalarioBase")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("salario_base");

                    b.Property<decimal?>("SalarioMaximo")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("salario_maximo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("Nome", "DepartmentId")
                        .HasDatabaseName("UX_job_roles_nome_department");

                    b.ToTable("job_roles", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.ValueObjects.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("district");

                    b.Property<string>("Cep")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("zipcode");

                    b.Property<string>("Cidade")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("city");

                    b.Property<string>("Complemento")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("street");

                    b.Property<string>("Numero")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("number");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cep" }, "IX_addresses_cep");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Benefits.BenefitTypes", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Benefits.BenefitCategories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Companies.Company", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.ValueObjects.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Companies.UserCompany", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Companies.Company", "Company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyRhSystem.Domain.Entities.Users.User", "User")
                        .WithMany("UserCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.Employee", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.ValueObjects.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyRhSystem.Domain.Entities.Companies.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeBenefits", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Benefits.BenefitTypes", "BenefitType")
                        .WithMany()
                        .HasForeignKey("BenefitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyRhSystem.Domain.Entities.Employees.Employee", "Employee")
                        .WithMany("EmployeeBenefits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BenefitType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeContacts", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Employees.Employee", "Employee")
                        .WithMany("Contacts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeContract", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Employees.Employee", "Employee")
                        .WithOne("Contract")
                        .HasForeignKey("MyRhSystem.Domain.Entities.Employees.EmployeeContract", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeDependents", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Employees.Employee", "Employee")
                        .WithMany("Dependents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.EmployeeDocuments", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Employees.Employee", "Employee")
                        .WithOne("Documents")
                        .HasForeignKey("MyRhSystem.Domain.Entities.Employees.EmployeeDocuments", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.JobRoles.JobRole", b =>
                {
                    b.HasOne("MyRhSystem.Domain.Entities.Departments.Department", "Department")
                        .WithMany("JobRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyRhSystem.Domain.Entities.JobRoles.JobLevels", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Companies.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserCompanies");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Departments.Department", b =>
                {
                    b.Navigation("JobRoles");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Employees.Employee", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Contract");

                    b.Navigation("Dependents");

                    b.Navigation("Documents");

                    b.Navigation("EmployeeBenefits");
                });

            modelBuilder.Entity("MyRhSystem.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserCompanies");
                });
#pragma warning restore 612, 618
        }
    }
}
