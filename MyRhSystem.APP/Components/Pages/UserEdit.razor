@page "/users/edit"
@page "/users/edit/{Id:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@implements IDisposable

<h3>@(Vm.IsCreate ? "Novo Usuário" : $"Editar Usuário #{Id}")</h3>

<EditForm Model="@(Vm.IsCreate ? (object)Vm.CreateForm : Vm.Form)"
          OnValidSubmit="@(() => Vm.SaveAsync())">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        @if (Vm.IsCreate)
        {
            <div class="col-md-6">
                <label class="form-label">Nome</label>
                <InputText class="form-control" @bind-Value="Vm.CreateForm.Nome" />
            </div>
            <div class="col-md-6">
                <label class="form-label">E-mail</label>
                <InputText class="form-control" @bind-Value="Vm.CreateForm.Email" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Senha</label>
                <InputText type="password" class="form-control" @bind-Value="Vm.CreateForm.Password" />
            </div>
        }
        else
        {
            <div class="col-md-6">
                <label class="form-label">Nome</label>
                <InputText class="form-control" @bind-Value="Vm.Form.Nome" />
            </div>
            <div class="col-md-6">
                <label class="form-label">E-mail</label>
                <InputText class="form-control" @bind-Value="Vm.Form.Email" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Nova senha (opcional)</label>
                <InputText type="password" class="form-control" @bind-Value="Vm.Form.NewPassword" />
            </div>
        }
    </div>

    <div class="mt-3 d-flex gap-2">
        <button class="btn btn-primary" type="submit">Salvar</button>
        <button class="btn btn-outline-secondary" type="button" @onclick="Vm.Back">Voltar</button>
    </div>
</EditForm>

@code {
    [Parameter] 
    public int? Id { get; set; }

    // injete a VM via atributo (evita o bug do @inject que você teve)
    [Inject] public MyRhSystem.APP.ViewModels.UserEditViewModel Vm { get; set; } = default!;

    private PropertyChangedEventHandler? _handler;

    protected override void OnInitialized()
    {
        _handler = (_, __) => InvokeAsync(StateHasChanged);
        Vm.PropertyChanged += _handler!;
    }

    protected override async Task OnParametersSetAsync()
    {
        await Vm.InitializeAsync(Id);
    }

    public void Dispose()
    {
        if (_handler is not null)
            Vm.PropertyChanged -= _handler;
    }
}
